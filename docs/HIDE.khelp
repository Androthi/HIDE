[kHelp Header]
Author = Sevag Krikorian
Version= 1.51.02
		hla 2.15
		stdlib 8
Created= Aug 02, 2006
Updated= Jan. 13, 2011
Licence= HIDE
Contact= sevag.krikorian@gmail.com
URL= http://sites.google.com/site/highlevelassembly/


[kHelp Contents]
Description
Operation
.First Execution
.The Windows
..Editor
..Output
..Tool Bar
..Tab Bar
..Status Bar
..Panel
...Project Panel
...Properties
.Compiling Simple Programs
.Menus
..Edit
..View
..Project
..Make
..Tools
...Debug Window
...Resource Editor
...ASCII Table
...cCalc
...Calculator
...Color Picker
...Open Console
...Run Program
..Options
...General
...Standard Mode
...Environment
...Code Editor Font
...Line Number Font
...Colors & Keywords
...Toggle Debug Mode
..User
..Help
.HIDE Macros
.Project Manager
.Auto Completion
CommandLine Tools
.kMake
Project File Format
Licences
.HIDE
.PellesC
.HLA

[HIDE Macros]

Here is a list of HIDE Macros that may be used in HIDE control boxes for paths and output redirection and in Target scripts.
 
 %$	current directory, usually folder of current open project
 %h	HIDE homepath
 %p	projects folder path (not current open project)
 %c	folder for current open project
 %i	hlainc folder path
 %l	lib folder path
 %t	temp folder path
 %s	active edit source filename
 %x	template folder path
 %b base name of current source
	 
 See Help-> Show Environment for the actual paths that will be substituted
 for some of these macros.


[Project Manager]

There has been a major overhaul of the Project Manager as of v1.50.xx  Those who are familiar with the previous manager may want to review the changes.

The Project Manager consists of two parts, the Project Settings and Jobs Manager.  The Project settings allow setting general options for the project in general and these will be consistent with all the project jobs.  The Jobs manager allows further management of files, and settings that are specific to jobs.

Project Manager opens the HIDE Manager to the Project tab.  Several management facilities are available here that govern the project in general.

		Project Dialog

Rename
	This will rename the project hpr file as well as the project folder.  It will not work properly if the project folder is open on the Windows desktop.

Tab Size
	Each project maintians a tab size separate from Standard mode.
	
Auto indent
	Automatic indentation by tabs.
	
Expand tabs to spaces

Backups
	Number of backup files to keep.  See Standard Mode chaper for more details.
	
Project Folders
	All the folders recognized by the project.  These are local to the project it includes the project folder itself.
	
	New
		Add a new folder to the project
		
	Delete
		Removes a folder from the project.  Folder must be empty.
		

Use local Temp folder
	Creates a local 'Temp' folder and sets the hlatmp environment to this folder.
	
Use Units folder for object files
	Creates a local 'units' folder for storing object files generated by HLA.
	
Use Bak folder for backups
	Creates a local 'bak' folder for storing backup files.  Otherwise backups are stored in the hlatmp folder.
	
		
		Jobs Dialog
		
Jobs in HIDE are a builde queue of things you want to get done and in what order you want them done.
There are several varieties of Jobs, each performing a specific function.  Each 'build' type job maintains its own settings, link options, linked objects and files.

The top half of the dialog allows creation of the jobs and setting job options.
The bottom half of the dialog allows creation and maintenence of files for the jobs.

Jobs list view contains all the jobs in the project and in what order they are built.
Only jobs in the Build Queue are built.
Two buttons below the Jobs view allows viewing jobs in the build queue or jobs that are held.
The up/down arrow to the left of the Jobs view allows changing the build queue order.

		The Job options

New
	Opens a new job dialog.  Here, select the Job Type and type in a Job Name.  Ok to confirm.


		Allowable Job types

	Program
		For HLA programs with an entry and zero or more supporting units.
		
	kMake Script
		A job that will launch a kMake script.
		
	DLL
		For HLA units designed to be compiled to DLL.
			
	Library
		For HLA units designed to be build into a library
		
	Misc
		For general informationfiles, supporting binaries, etc.
		Misc jobs do not have a build.
		
Rename
	Renames the selected job.
	
Remove
	Removes the selected job.  The files list for the job must be empty.
	
Hold/Build
	Depending on current view; Sends the selected job to the Held list, or
	sends a held job to the build queue.
	

		Files View
		
When a Job is selected, the job files are listed here.

New
	Opens a New file dialog.  Here you may select File Type, Folder and File Name.  If import is selected, a dialog opens allowing a file selection for import, otherwise a new file is created.
	
		Folder

	Only project folders are available.
	This is where the file will be created.
	Folders are relative to the Project folder.
		
		Allowable File Types
	
	The currently selected job will determine which of the following types are available.
	
	HLA Main
		Creates a file that will become the main HLA program/unit.  This file will contain the entry.
		
	HLA Unit
		Creates a file that will be a supporting HLA unit
		
	HLA Header
		Creates an HLA header file.
	
	Resource
		Creates a resouce type file.
		
	kHelp Doc
		Creates a kHelp document
		
	Binary
		Creates a binary file.
		
	Misc
		For any other type of file.
	
	DLL Definition
		For DLL definition types
			
	kMake script
		Only available for kMake jobs.
		
Rename
	Allows renaming and moving the selected file.
	
Remove
	Remove selected file from project and delete the file.  Opens a dialog where a new folder and filename may be selected.
	

		Job Options
		
Once a Job is selected, various options may become available depending on the Job type.

Output
	For build type jobs, select the output name to produce.
	
HLA Level
	Deside the HLA level for the current job.
	
Send stdout to Output window
	redirects output from running a job to the HIDE Output window.
	
Link as PE-GUI
	links the job as a windows PE GUI executable.
	
Thread Safe HLALIB
	compiles the job with -thread switch and links hlalib_safe.lib
	
Use Debug library
	compiles the job with -ddebug switch and links debug.lib
	
Link Options
	Opens an advanced link dialog to allow setting specific linker details.
	
Linked object view
	Shows all the libraries/objects to link with this job.
	
	New
		add a new library/object to link
		
	Remove
		remove the selected library/object from linking list.
		

[Auto Completion]

	Bernd Kastenholz has written an autocompletion module for HIDE.
	Autocompletion listbox is opened by pressing ctrl-space
	
	
Activation in HIDE-editor: Key Ctrl-Space
	Opens a dialog beneath the cursor. The listbox contains all
	strings of file 'HideHomepath\data\autocompletionlist.txt'.

Settings: Key F1 (does only work when autocompletion dialog is visible)
	Opens the settings dialog. Only the sort property of
	the listbox can be changed.
	The settings are stored in file 'HIDE\data\Autocompletion.ini'
	
Controlling the listbox:
	Arrow up: Scroll up in the listbox
	Arrow down: Scroll down 
	Arrow left: Increase the selection to the left
	Arrow right: Decrease the selection to the right 
	Backspace: Increase the selection to the left
	Return: Inserts the selected word and closes the dialog
	DblClk with left MB in listbox: Inserts the selected word and closes the dialog
	Scrolling with mousewheel.
	ESC: Just closing the dialog and deletes the selection
	HOME: Scroll to first item 
	END: Scroll to last item
	PGDN: Scroll down one page 
	PGUP: Scroll up one page
	
Updates:
8/2/2006
	-fixed a bug  (while inserting chars)
	-now the word list will be destroyed when changing the sort property

8/1/2006
v1.0.1
	-added controlling the listbox with HOME, END, PGDN and PGUP
	-fixed deleting of text
	-fixed decreasing/increasing bug
	-fixed backspace bug. Deletes now the selection
	-cleaning the source code
	
7/31/2006
v1.0.0
	first release of autocompletion


[Project File Format]
<text>

Note: this format has changed significantly in HIDE 1.23.00 +
The original format is no longer supported and an automatic converter
is provided to help in converting older projects to the newer format.


Here is a sample HPR file.  I'll walk through the sections one at a time.

[HPR Settings]
mainfile=Src\cCalc.hla
tab=6
backups=0
options=199
Project Version=10
usetemp=false
useunits=true
useback=false
findscope=1
findflags=0

[HPR Jobs]
cCalc

[HPR Folders]
units
res
src

[cCalc]
console=false
output=cCalc.exe
type=modular
main=cCalc.hla

[cCalc.link]
-heap:0xF4240,0xF4240
-stack:0xF4240,0xF4240
-base:0x4000000
-entry:HLAMain
-section:.data,RW
-section:.text,ER
-machine:ix86



[cCalc.files]
kernel32.lib,,extlinked
user32.lib,,extlinked
hlalib.lib,,extlinked
hidelib.lib,,extlinked
cCalc.hla,src,hlaprogram
cCalc.rc,res,resource
cCalc.hhf,src,include
cCalc.txt,,misc


==============================================================

[HPR Settings]
mainfile=Src\cCalc.hla
tab=6
backups=0
options=199
Project Version=10
usetemp=false
useunits=true
useback=false
findscope=1
findflags=0


This section gives HIDE some detailes on how to treat this project

mainfile
HIDE opens ths file when the project is first loaded.  Any file
can be set as mainfile by right-clickig the name in the Project
Panel and selecting "Set Auto Open"

tab
Number of spaces in a tab

backups
Maximum number of backups reserved for this project

options
Maintains a bit-map of options

Project Version
Used for automatically updating changes to the project file format.
A version of <10 is the older project format which is no longer supported.

usetemp
useunits
useback
Some folders are auto-maintained.  These show true or false wether this project makes use of these facilities.
usetemp = temp folder		"temp"
useunits= units folder		"units"
useback = backups folder	"bak"

findscope
findflags
These maintain the find options for this project.

[HPR Jobs]
cCalc

This section lists the jobs queue.  Every item here is executed in
order from first to last.  There may also be a [Held Jobs] section
which are jobs removed from the build queue. 


[HPR Folders]
units
res
src

This section lists all the folders recognized by the project.


[cCalc]
console=false
output=cCalc.exe
type=modular
main=cCalc.hla

Each job listed in [HPR Jobs] and [Held Jobs] will have its own
corresponding section which describes what the job is all about.

console
Indicates if this job will build as a console or PE GUI

output
Indicates the path/name of the output produced by this job

type
Corresponds to the type of job as selected when job was created

main
If this job has an entry (ie: it's an executable or DLL) then
this will indicate which file is the entry.

	
[cCalc.link]
-heap:0xF4240,0xF4240
-stack:0xF4240,0xF4240
-base:0x4000000
-entry:HLAMain
-section:.data,RW
-section:.text,ER
-machine:ix86

Each job will have its own link section.  This passes information to
the linker.  These options may be edited from the Project Manager


[cCalc.files]
kernel32.lib,,extlinked
user32.lib,,extlinked
hlalib.lib,,extlinked
hidelib.lib,,extlinked
cCalc.hla,src,hlaprogram
cCalc.rc,res,resource
cCalc.hhf,src,include
cCalc.txt,,misc

Each job will have its own files section.  Every file is listed,
along with its folder and type.


</text>


[kMake]
<text>
kMake is used to build target jobs.  To edit a target job write in the optional [BUILD] section to avoid warnings from kMake.

eg:
[BUILD]
; commands to run

For those unfamiliary with kMake, the manual is included in Help -> HIDE Tools

For a quick summary, a script may launch any program or MS-DOS command that are available on your path.  If you need to add more paths to HIDE, use Option -> Set Paths menu and add as many paths as you like to "User Paths"
The script may also contain HIDE macros (see Help -> Show Environment for an available list of macros and what they expand to).

</text>

[CommandLine Tools]

	For more in-depth documentation of these tools, see the HIDE Tools manual.


[Help]
<text>

Win32 API
	Before this feature can be used, it has to be configured with the location of your Windows help file.
To do so, use Option -> Set Paths menu and add the location of your win32.hlp (or other) file to the "Help F1" field.

Once configured, selecting this menu will open win32.hlp (or other selected program).  Selecting it while cursor is on a word will try to locate the keyword in win32.hlp and open that topic.

The Tutorials and manuals may need to be downloaded separately.  These files are the kHelp versions of the documents.  When downloaded, the tutorials go in HIDE\Documents\Tutorials folder, the rest go in HIDE\Documents
When selected, kHelp is launched to display the document.

Show Environment:
	Displays the current HIDE environment and macros associated with the paths.

Show Files List:
	Dumps a list of all the project files, their Job segment and their locations in the Output window.
	
About
	Opens a dialog with credits, info and other...

</text>

[User]
<text>
The user menu is not shown unless there are user menus defined in the Data\Hide.ini file.
To define a user menu, add a [User Menu] section to HIDE.ini
Each line under "[User Menu]" has the format:
menu id, command to execute w/arguments, optional options
As of version of this document, the only option is output which redirects output to HIDE's output window.

The command execution line may also contain HIDE macros (see below).
 Eg:

 [User Menu]
 calc, calc.exe
 Alpha, alpha.exe %s, output


See HIDE Macros section for more details on macros.

HIDE will also use appropriate programs to launch for opening documents from the user menu.  It will determine this based on the document extension provided.
One can use this feature to open files using HIDE. 

	eg:

	[User Menu]
	My Help, "c:\my documents\mypdf.pdf"
	
	The above will attempt to open mypdf.pdf with
	default pdf viewer, if one is found.
	
	To open files using the text/hex editor in HIDE, 
	place the '<' (less than) char right before
	the filename
	
	eg:
	
	[User Menu]
	HIDE.ini,<%h\data\hide.ini
	
	This will open "hide.ini" located in the HIDE\Data
	folder using the current instance of HIDE.
	
	Use the '>' (greater than) char right before
	the filename to open as HEX.
	
	The '<' and '>' chars must appear before quotes, if
	quotes are used. 

	Some usuful user menus to consider:
	
	[User Menu]
	Browse Project Folder, explorer %p
	Browse Current Project Folder, explorer %c
	Browse HIDE Folder, explorer %h
	

</text>

[Standard Mode]
<text>

	Opens the HIDE Manager to the Settings tab.  This dialog allows you to change the default editor behavior settings.

The settings here govern Standard Mode and all newly created Project Jobs.  Settings for Project Jobs may later be changed through the Jobs Manager.  

Tabs:
	Tab Size: number of spaces in each tab.
	Expand tabs: change tabs to spaces.
	Auto indent: pressing enter will automatically tab to the previous indent.

Backups:
  Instructs HIDE to make backups of every file modified, up to the number specified.  Once the limit is reached, the backups cycle back through the lower numbers.  the files are saved in the HIDE\temp folder.
The backup naming convention is thus:

[n]<filename>	where n is the backup number
If Backups is set to 0, no backups will be created.

Linker Settings:
	Adjust the default linker settings.  This is considered an advanced feature. 

Add/Remove Linked Object
	Allows adding and removing objects that are linked.

Send Console output to Output Window:
	Redirects standard out of console programs executed to the output window.  Note: this does not allow input.

Link PE GUI
	Links output as Windows PE GUI

Compile stdlib threadsafe mode
	Compiles with -thread option and 

Compile with debug mode
	Compiles with -ddebug option and linkes in debug.lib.  This is used in conjunction with hide\dbgwin.hhf and Debug Window tool.
	

HLA Level:
	This determines the level at which HLA will attempt to compile sources.
	4 options available
	high, medium, low, machine


</text>


[General]

The settings chosen here are global and do not change between differnt HIDE modes.  They are always determinant.

Open previous Project on startup
	Attempts to open the last project worked on

Automatically save untitled files
	Automatically save [Untitled] as HIDE\temp\temp.hla *
	
	the executable after a build will be in that folder
	as well.
	
	*Note, if there is a project open and it has 'Use Temp Folder'
	active, the file will be saved in the projects's temp folder.

Use Standard Templates when creating HLA files
	Everytime a new file is opened, depending on what kind
	of file, HIDE will fill in code according to the files
	located at HIDE\Data\Templates\Standard.  If you do
	not like these, feel free to update them to your taste,
	but create backups before upgrading HIDE, as the files
	may be overwritten.

Scan for HLA related Properties:
	Properties scanning is optional.  Turn this off on low end systems that
	exhibit slowdowns during symbol scanning.
	I've tried to make the scanner as through as possible.  It is possible that I have not been able to account for all programming styles and some symbols may be missing from the property display.


Keep HIDE window at Top
	Makes HIDE a top level window.


Hilite HLA Comments
	hilites commented code

Hilite current line
	Hilites the current cursor line

Show Divider Lines
	Shows divider lines between some HLA structures.

Show Line numbers
	Automatically opens the line number panel for every open file


Automatically finish Parenthesis:
	Automatically completes parenthesis or '[', '{'
	and '('.  Also if the closing parenthesis is used
	at the end of a word, the opening parenthesis is
	automatically inserted at the beginning of the word 


Automatically complete HLA Structures
	completes or assists when HLA structural keywords are used


Do not delete temporary files:
	Saves temporary files in either project/temp folder
	or HIDE/temp folder

Verbose report from HLA compilations
	Compiles with the -v switch active.

Automatically determine dependencies:
	This activates the dependency checking feature of HIDE.  Dependencies are considered only if the file is included and exists as a project file.  To determine which dependencies HIDE will consider, you may right click on a file name in the Project View.  If there are dependents, a menu item "View Dependents" will be visible.  Clicking this will list dependents in Output window.
	
Code editor font and line number font may also be selected from this dialog.


[Environment]
<text>

Opens the HIDE manager to the Environment tab.  The fields can accept legal physical or relative paths.  All HIDE macros are available for use in the fields and it is suggested that HIDE-relative macros be used for changing environment paths.


User Paths
	Use this to extend the system search path used by HIDE
	
Project Folder
	The default project folder is located at HIDE\Projects.  Use this field to change the location to another folder.
	
Debugger
	In this field, enter the path and executable of the debugger that will be launched when the user selects "Run With Debug"
	
Help (F1)
	In this field, enter the path and name of a help file that will be used for Windows API documentation
	
hlalib
	Use this field to change the "hlalib" environment path.  This path must always point to a valid hlalib library.
	
hlainc
	Use this field to change the "hlainc" environment path.	

hlaopt
	This field sets the hlaopt environment to be used only with the menu option Make -> HLA on Active Source
	
</text>

[Colors & Keywords]
	
	Opens the HIDE Manager to the Themes tab.  Allows customization of highlight colors and highlight key-words.  five slots are available for user defined lists, these will never be altered by HIDE (though their selected colors will change if more HIDE lists are added ).
Here you will also be able to use and save Themes.  Several themes are included and your own themes may be saved.  Saved themes are stored in data\HIDE.ini.  Only themes you save may be deleted.  Active theme is saved as "colors" and "usercol" in data\HIDE.ini

[Toggle Debug Mode]

Quickly switches between Release to Debug mode.  If the selected file is a project file, it will change the file's Job setting, otherwise if will change the Standard Mode setting.


[Code Editor Font]

Customize the font used in the editor and output windows.

[Line Number Font]

Customize the font used in the margin.

[Options]
	Control all cutsomizable aspects of HIDE, from font/color settings to output types.

[Debug Window]
	A simple window that can display run-time output sent by your programs.  Operatation of Debug Window requires several steps.

1. Include the dbgwin header file (located in the hlainc\hide folder).
#includeonce ("hide\dbgwin.hhf")

2. Link with debug.lib  This is done automatically by setting the Output Version (in Compiler Settings dialog, see Options) to Debug (debug mode).

3. Add a global compile time variable called debug to your source.  This is done automatically by setting the Output Version to Debug (debug mode).

Displaying text to the debug window is done by a series of macros all of which use the "dbg" namespace.

Current functions:

dbg.put(arg1,[arg2],[arg...]);
	Used somewhat like stdout.put, but less powerful.
Eg: dbg.put("The variable MyVar contains the value: ",MyVar);

dbg.cls:
	Clears the debug window display of any text.
Eg: dbg.cls;

dbg.putz (addr);
	Displays a zero-terminated string.

dbg.separator;
	Draws a separating dashed line.
Eg: dbg.separator;

dbg.dumpmem(address,length);
	Displays an arbitrary memory location at address passed in address parameter and of length passed in length parameter.

dbg.dumpregs;
	Displays the contents of the registers.

dbg.trace;
	Starts HLA trace, displayse current file/linenumber for most instructions.

dbg.endtrace;
	Ends the trace

dbg.timer;
	Starts a timer for measuring performance of code.

dbg.endtimer;
	Ends the timer and displays the time.


[Tools]
	These tool selections are hard coded into HIDE, included in the bin folder or operating system and always available


[Resource Editor]
Launches Ketil.O's ResEd.
If there is a project open, it checks the current job and tries to find
a resource file.  It will open that file in ResEd.
To make sure ResEd opens a particular file, right-click the resource
in the Project Panel and select "Open With ResEd"

Note: HIDE loads all files into memory.  ResEd modifies external files.  Although HIDE reopens the current resource file after exiting from ResEd, at times a user will have ResEd produce an additional file (such as rsrc.hhf) which will need to be manually reopened.  An asterisk beside the file name in the Project view indicates a file has been modified externally and needs to be reopened, do so by right-clicking on the filename and selecting "Reopen File".


[cCalc]

A useful little utility that has two functions:
1. an instructional use, see how logical operations and some CPU arithmatic instructions affect the flags register and bits.
2.  a use as a bit-mask generator.

For more details, see the HIDE Tools manual (Help menu).

[ASCII Table]
	Runs asciitbl.exe which outputs a basic text Ascii Table to the output window.

[Calculator]
	Launches system calculator, calc.exe

[Color Picker]
	Opens a color selection dialog.  Clicking OK on the dialgo will send the current color to the main edit window at the carot postion as an HLA hex number.

[Open Console]
	Runs the program attached to the "ComSpec" environment variable.
	
[Run Program]
	Opens a dialog for input.  Attempts to execute the input.  You may use HIDE macros.
	The dialog shows the last text entered.

[Make]

Build Active Job:
If the current file belongs to a job, that job is built.  If it's a
non-project file, the file is built.

Build Project:
This option builds all the jobs in the project, in the order displayed
in the Project Panel.

ReBuild Project:
Forces a rebuild of all the jobs without checking file-dates.

Rebuild Active File:
Forces a rebuild of the current file without checking file-dates.

Rebuild Active Job:
Forces a rebuild of the current active job without checking file-dates.

Build to Object files:
Builds to objects but does not attempt to link.

HLA on Active Source:
Runs HLA on the currently active source file.  The default commandline consists of:
hla %s
to change this behavior, modify the hlaopt environment in Options -> Environment dialog.


Run: Runs the executable of the current active job, if any.

Build Project & Run:
First Builds the project then runs the produced executable of the active job

Run With Debug:
Runs a previously built program of the active job with a specified Debugger.
See Options menu Set Paths for more info.

Clean:
Deletes compiled object and resource files.  Note: Since HLA now produces object files in source folders by default, this will not work if you have dedicated source folders while "Use Units Folder" is unselected.  HIDE will not search for objects files in all your source folders.  To work around this, select "Use Units Folder" for each of your Jobs.  

Test Build -Commands only:
Shows the commandlines HIDE will execute under normal execution of Make->Build Project
No actual execution will take place.

Source HLABE:
Converts the file in the active window into hla's internal HLABE format, opens a new
window to display the contents.
This format is useful for seeing the high level functionally of hla unrolled into low level and debugging macros.

Source -> MASM, FASM, NASM, GAS
Converts the file in the active window into hla's translation of the various supported languages.
This format is useful for seeing how hla code appears in other assembly languages. 

Some of these options are also available in the right-click menu of the
Project Panel.


[Project]

	New Project

Opens a dialog to get a file name for creating a new project.
Enter a project name, options include using a template or starting with the Project Manager.
There are some quick templates included for convinience.
Projects will be saved in their own folder located at HIDE\Projects (default), or at the current user-specified projects folder (Options -> Environment... ).  The current projects folder is displayed in the dialog.
Once a project is created, any currently open project is closed.  If no templates are used, the Project Manager opens.  Otherwise the template project is created and opened.


See the description of Project Manager on how to add new jobs and files to the project.


	Open Project
	
Opens a previously created project.  If there is an active project, it is closed.


	Close Project
	
Closes current project.


	Project Manager
	
Opens the Project Manager dialog.  See the Project Manager topic for more information.


	Jobs Manager
	
Opens the Jobs Manager dialog.  See the Project Manager topic for more information.


	Create Template
	
Conversts the current project to a HIDE template.  HIDE will attempt to conserve all information and embed any binary files that may be attached to the project.  Notes are not saved.


	Consolidate Windows Header

Selecting this option activates wscan.exe which scans your project sources for any Window header labels ( namespace w ).  It then scans the main w.hhf header files and creates a smaller sub-set of this file using only the labels (direct and indirect) declared in your sources.  This automatically creates a "win_inc.hhf" header file and adds it to your project.  To use this file, you must #include ("win_inc.hhf") with any unit that needs them (see the wscan documents for more information).


	Empty Temp Folder

This will delete the contents of the current temp folder.  The location of the temp folder will vary depending on project settings.  See Help->Show Envrionment menu for current temp folder.

[View]

Shows or hides, docks or undocks various HIDE windows:

Treeview: contains a file-list of the current project.
Toolbar: some of the commonly used menuitems are on the toolbar
Statusbar: contains some useful at-a-glance information about mode.
Output: compiling output is displayed here.

Toggle Windows: closes open Panels, opens closed Panels
HIDE Windows: hides all open Panels
Panel: Hides/shows side panel
Output: Hides/shows output panel
Dock Output: docks/undocks Output panel from main window
Cycle Panel: changes views in side panel


[Edit]

Standard: Standard cut, copy, paste options available.

Indentation:
	Indent adds the tab character at the beginning of each selected line, while Outdent works the inverse.

Commentation:
	Comment and Uncomment have 2 modes.  With HLA files (sources ending with .hla or .hhf), the comment adds a double slash at the beginning of each selected line. Uncomment works the inverse.

Bookmarks:
	Toggle bookmark adds a bookmark at the current line.  The margin displays a filled circle at the location.  Next/Previous Bookmarks cycle between saved bookmarks.  Clear All Bookmarks removes all saved bookmarks.
	These bookmarks are only good for the current session, they will not be remembered if you exit HIDE.

Source Bookmarks:
	Regular bookmarks only last one session, to have persistant bookmarks, use a source bookmark.  These will add a commented bookmark into the source which the HIDE properties scanner will pick up and display in the "bookmarks" view of the Properties panel.  Remove a bookmark by deleting the comment.
	
	"Insert Source Bookmark" will open a dialog asking for a label.  Enter a single word to describe this bookmark.  HIDE will add a comment at the current cursor position that looks like:
	//bm=label
	This can be entered manually as well.  Next property update, the bookmark will be displayed in the "bookmarks" view and the bookmark will be saved in the source.


Block Selection:
	Mark Set/End sets begin and end points for block selection.  This is an alternative to shift-scrolling to select large blocks of text.

Quick Navigation to Labels:
	Find/Return Declare tries to find the location in the sources where the current label under the carot is declared.  The middle mouse button does the same thing except for the word currently under the carot position.  There are up to 5 saved position, 4 through menus and 1 with middle mouse button.  Selecting a menu again returns to the original spot.
Note: When the cursor hovers over a declared label, the property information of the label (if any) is displayed on the status bar.

Goto Program Begin jumps to the main program begin location of the Entry file.


[Compiling Simple Programs]
	When there is no open project file, HIDE will operate on Standard mode, this mode is displayed on the status bar.  In this mode, you may compile simple programs.  This mode does not allow use of units or resources.  The default libraries are linked in initially, thous these may be modified using Options->Standard Mode dialog.
	
	To use Standard mode, simply load an HLA sample program or write one.  Use menu item File -> Open to open a new editor window. When the program is typed, you may save it then compile.  If the option "Automatically save untitled files" (options->General dialog) is selected, HIDE will save untitled files as "HIDE\Temp\Temp.hla" then run HLA on that file.  The object and executable (if any) will also be produced in the temp folder.

[Status Bar]
	Status bar contains various information on HIDE modes and files.
From the left: 

Line number, number of lines

INS/OVR, insert/overwrite mode

Standard/Project, shows if the currently selected file is part of the currently open project or a standard file.  Standard files are listed as "orphans" in teh tree view.

Release/Debug, inidcates if "Debug" or "Release" is selected in HIDE Settings for standard files or Job settings files that belong to project jobs. 

Info, if the pointer/cursor hovers over a recognized property, some useful property information is displayed here.

[Tab Bar]
	This displays all the files that are currently open.  Clicking on the tab will select that file for editing.

[Tool Bar]
	Contains various buttons for quick access.  All of these also have menu-bar counterparts.

[Properties]
	If a project is open, this window will contain information on the sections of a project, including procedures, and variables.  A tool bar allows selection of display mode: all project files or current open file.

[Project Panel]
If a project is open, this window will contain a treeview display of all the Jobs and files in the project.  Double-click on a file to open it in the editor or Hex editor (depending on the file-type).
There are also other options available if you right-click the name.  A menu will open offering different options are available depending on the file-type.
Also, when a file has been altered by an external program, an asterisc '*' will appear before the name.

Different file/job types have special icons for easy recognition.

A target/ghosted target indicate a target job type.
A hammer/ghosted hammer indicates a build-type job.
Ghosted indicates a held job.
A circle with a 'P' indicates a Program (or entry) source.
A square with an 'U' indicates a unit source.
A blue square with an 'RC' indicates a resource-type file.
A square with line-dashes indicates a misc or include type file. 
A green circle with a 'B' indicates a binary-type file.


Items that may appear in the Right-click menu:

-Project Manager
	Opens the Project Manager.  This option is available with all types.

-Dedicate to wscan
	Selecting this file will reserve it for being used with "Consolidate Windows Header" Project menu.
This option is available with all include file-types.

-Set Auto Open
	Selects this file to open automatically when the project is loaded.  This option is available with all text file-types.

-Reopen File
	Reloads the file from disc.  Especially useful it the file has been altered externally.  This option is available with all text file-types.
	
-Open With Resed
	Opens the file with ResEd.  This option is available with resource file-types.

-Rebuild File
	Forces a rebuild of the selected file.  This option is available with Source and Resource file-types

-Rebuild Job
	Forces a rebuild of the selected job.  This option is available with Build Job-types.
	
-Run, Run With Debug
	Runs any output for the selected job.  These options are available with Program Job-types.
	
-Execute Script
	Executes the selected kMake script.  This option available with Target job-types.

-Open With kHelp
	Opens the selected file with kHelp.  This option available with kHelp file-types.
	
-View Dependents
	Only available if Autodependencies is selected in HIDE Setting and the current source has dependents.  This item lists all the dependents in the Output window.
	
	
[Panel]
	The collapsable panel on the right side hosts several windows.
Each window has a Pin button and a Close button.

To undock a window from the Panel, simply click on the title bar and drag the window out.
To dock a window back into the Panel, click its tab on the Panel.
If you wish to anchor an undocked window so that it does not dock when the its Panel tab is clicked, click on the Pin button.  The icon will change to indicate window is pinned.
Click the Pin button againt to deactivate anchor.
The close button hides the window and docks it back to the Panel.

[Editor]
	The HIDE editor uses KetilO's powerful RAEDIT.dll This window contains 3 buttons along the horizontal scroll bar: From left to right, Show/Hide Line Numbers,  Expand All, Collapse All.  Expand and Collapse work on folding text which makes navigating large documents easier. HIDE is setup to fold procedures and declaration sections.

There will be a '+' and '-' buttons in the margin to indicate text blocks that can be folded/expanded.
Near the bottom scrollbar, there may be up to three extra buttons, one expands the margin to show line numbers, the other two expand/collapse all blocks in the current window.
When a bookmark is set, you will see a blue square in the margin.  Clicking on the square removes the bookmark.
The editor window also has a Splitting Bar along the top of the vertical scroll bar.  This allows you to split the view into 2 windows.

[Output]

This window has two modes selectable by two buttons on the title bar; Notes and Output

While in Output mode, the window displays information on programs that are launched from HIDE.  This includes error reports from HLA.
If the Output window is hidden when information needs to be displayed, it is opened temporarily and then closed.  To cancel the automatic closing timer, click anywhere in the Output window.

While in Note mode, the window displays an edit control used for saving project notes.  These notes are saved directly in the project file (.hpr)

[The Windows]
	HIDE is subdevided into several Windows.  A collapsable side panel contains several tool windows and an output window below displays execution details.
	
[First Execution]
	The first time you run HIDE you may see 1 to 4 windows open, depending on the initial setup of your current version.  At the very least, the main window (the one with the menu-bar) will be open.  The visibility of other windows may be altered by selections in the View menu.  The windows may be in either floating or docked mode.  Floating windows reside outside the main window, while docked windows will be within the main window itself.
	Whatever changes you make to the window positions and status will be saved and restored the next time you start HIDE.
	

[Description]

	HIDE is an integrated development environment for use with Randall Hyde's HLA (High Level Assembler).  The HIDE package contains various 3rd party programs and tools to provide for a complete environment that requires no files external to the package.  Designed for a system-friendly interface, HIDE makes no changes to your system registry and requires no global environment variables to function.  The only exception is ResEd (a 3rd party Resource Editor written by Ketil.O) which saves its window position into the registry.


[Licences]
	HIDE package contains tools released in various licences.

[HIDE]
HIDE
Copyright (c)2006 Sevag Krikorian

This licence applies to all versions of HIDE including any
future released version, unless a new licence is applied.

HIDE consists of HIDE.exe as well as the package "HIDE."  The
package consists of other 3rd party tools and any licences
associated with these tools are provided separately.

This program is free for commercial or private use as long as
the following conditions are respected.

1. Redistribution
	Redistribution in source or binary form is permitted.
The copyright notice, disclaimer and this licence 
(as well as the lincences of all 3rd party software that is
redistributed) must be retained.

2. Modification
	The source may be modified and redistributed.
Redistribution of modified code also falls under the conditions
of redistribution (see #1).

	Modified source cannot be copied and placed under a
different licence, including the GNU Public Licence.

3. Disclaimer
	This software is provided "as is" and any express or
implied warranties, including merchantability and fitness for
a particular purpose are disclaimed.
	The author and contributors will in no case be liable
for the use or misuse of this software, including, but not 
limited to direct, indirect, incidental, special, exemplary or
consequential damages.


[PellesC]
This software is provided 'as-is', without any expressed or implied warranty.  In no event
will the author be held liable for any damages arising from the use of this software.

Permission is granted to anyone to use this software for any purpose, including commercial 
applications, and to redistribute it freely, subject to the following restrictions:

1.	The origin of this software must not be misrepresented; you must not claim that you
	wrote the original software.
2.	Including Pelles C in a CDROM or in other products sold for profit needs explicit
	agreement from the author.
3.	This notice may not be removed or altered from any distribution.

Pelle Orinius
Stockholm, Sweden

[HLA]



*******************************************************
*                                                     *
*              HLA License Information                *
*                                                     *
*******************************************************


The HLA system is built from many different components,
each with its own separate end-user license. Because
an end-user can mix and match the components that make
up the HLA system, it is not possible to provide a single
all-encompassing license for the entire HLA system. The
following paragraphs will explain how to determine the
specific license requirements for your particular HLA
configuration.


The HLA shell program ('HLA.EXE' under Windows, 'hla'
under other operating systems) is open source and public
domain. You may do anything you like with this code,
without restriction. Here is the official license code
for HLA public domain components:

I, Randall Hyde, hereby agree to waive all claim of copyright (economic
and moral) in all content contributed by me, the user, and immediately
place any and all contributions by me into the public domain; I grant
anyone the right to use my work for any purpose, without any

conditions, to be changed or destroyed in any manner whatsoever
without any attribution or notice to the creator.  I also absolve myself
of any responsibility for the use of this code, the user assumes all
responsibilities for using this software in an appropriate manner.



Notice of declaration of public domain, 3/2/2007, by Randall Hyde

The HLAPARSE compiler module contains public domain code
written by Randall Hyde and freely distributable software
written by Tomasz Grysztar. As such, this code inherits
the FASM license [see description of FASM license]
If you use to use HLA in conjunction with MASM,
the Microsoft Linker, and Microsoft's RC.EXE
resource compiler, then the use of those tools
is subject to the Microsoft end-user license
agreement (EULA) that accompanies those products.
As you are responsible for obtaining these products
(they are not provided as part of the HLA package)
you need to check the EULA that comes with the
distribution of these products that you've obtained.
If you use to use HLA in conjunction with FSF's,
GAS (as) and linker (ld) programs, then note
that those products are licensed under the GPL
(see the license text accompanying those products
for details). Note that these products are separate
applicatons in the HLA system and the fact that they
are GPL in no way forces this license onto the rest
of the HLA system. As you are responsible for obtaining
copies of GAS and LD to use with HLA, please consult
your source of these products for a copy of the GPL
license. Note that the HLA distributions to not include
any FSF GPL'd code. The HLA end-user is responsible
for installing HLA in a system that already contains
these GPL'd components.
If you use to use HLA in conjunction with the,
the Pelle C tools (polink.exe and porc.exe)
then the use of those particular tools is subject
to the license agreement for the Pelles C system.
That license applies only to polink.exe and porc.exe
it does not apply to the rest of the HLA system.
The Pelles C license is replicated here for your
information. Note that the phrase 'applies to all
parts except the C compiler' means that this license
is what covers POLINK.EXE and PORC.EXE, the components
that are part of the HLA system.  If the Pelles C
compiler appears as part of the HLA download, it will
also include a copy of the C compiler license, please
see that license for details.
[see PellesC license]


In general, there are no restrictions on HLA's output.
The HLA standard library code is all public domain
and the code emitted by the HLA compiler is totally
free for any use. When using FASM, GAS, or TASM output
there are no restrictions at all on the programs you
create with HLA.  If you're using MASM as the back-end
of the HLA system, be sure to check the EULA. There has
been some discussion that the EULA forbids the creation
of certain types of applications using MASM, and if
you're using MASM with HLA, any restrictions in the
MASM EULA would apply to the code processed by the
HLA system when using MASM as a back end. Note that
this declaration is not claiming such restrictions
exist, only that you should check your MASM EULA
if you have concerns.


You can assume that all HLA sample programs written by
Randall Hyde and distributed as part of the HLA system
are public domain (governed by the public domain
declaration given earlier). You are free to use those
sample programs in part or in whole as you desire.
The HLA Standard Library source code is also public
domain and you may use that code in any manner you
see fit.


